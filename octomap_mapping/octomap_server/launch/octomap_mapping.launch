<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>
	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.2" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<!-- param name="frame_id" type="string" value="camera_depth_optical_frame" /-->
		<!-- param name="frame_id" type="string" value="vicon" /-->
		<param name="frame_id" type="string" value="optitrack" />
		
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="5.0" />
		
		<!-- data source to integrate (PointCloud2) -->
		<!--remap from="cloud_in" to="/red/camera/depth_registered/points" /-->
		<!--remap from="cloud_in" to="/camera/depth_registered/points" /-->
		<remap from="cloud_in" to="/red/camera/depth_registered/points" />

		<!-- Testing -->

		<!--param name="base_frame_id" type="string" value="vicon" /-->

		<param name="sensor_model/hit"  value="0.51" />
		<param name="sensor_model/miss" value="0.49" />

		<param name="sensor_model/min" value="0.1" />
		<param name="sensor_model/max" value="0.9" />

		<param name="latch" value="true"/>

		<param name="pointcloud_min_z" value="1" />
		<param name="pointcloud_max_z" value="3"/>

		<param name="occupancy_min_z" value="1" />
		<param name="occupancy_max_z" value="3"/>

		<!--param name="filter_ground" value="true" /-->

	</node>
</launch>
